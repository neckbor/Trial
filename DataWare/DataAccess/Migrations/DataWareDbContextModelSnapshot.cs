// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(DataWareDbContext))]
    partial class DataWareDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ExternalBookingId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_booking_id");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<int>("TicketingProviderId")
                        .HasColumnType("integer")
                        .HasColumnName("ticketing_provider_id");

                    b.HasKey("Id")
                        .HasName("pk_booking");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_booking_status_id");

                    b.HasIndex("TicketingProviderId")
                        .HasDatabaseName("ix_booking_ticketing_provider_id");

                    b.ToTable("booking", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Dictionaries.Airline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<string>("IATACode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("iata_code");

                    b.Property<string>("ICAOCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icao_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_airline");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_airline_country_id");

                    b.ToTable("airline", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            IATACode = "AF",
                            ICAOCode = "AFR",
                            Name = "AirFrance"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 3,
                            IATACode = "BA",
                            ICAOCode = "BAW",
                            Name = "British Airways"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 5,
                            IATACode = "EK",
                            ICAOCode = "UAE",
                            Name = "Emirates"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Dictionaries.Airport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CityId")
                        .HasColumnType("bigint")
                        .HasColumnName("city_id");

                    b.Property<string>("IATACode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("iata_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_airport");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_airport_city_id");

                    b.ToTable("airport", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CityId = 2L,
                            IATACode = "CDG",
                            Name = "Аэропорт Шарль-Де-Голь"
                        },
                        new
                        {
                            Id = 2L,
                            CityId = 4L,
                            IATACode = "LAX",
                            Name = "Международный аэропорт Лос-Анджелес"
                        },
                        new
                        {
                            Id = 3L,
                            CityId = 5L,
                            IATACode = "DBX",
                            Name = "Международный аэропорт Дубая"
                        },
                        new
                        {
                            Id = 4L,
                            CityId = 1L,
                            IATACode = "LHR",
                            Name = "Лондонский аэропорт Хитроу"
                        },
                        new
                        {
                            Id = 5L,
                            CityId = 3L,
                            IATACode = "TBS",
                            Name = "Международный аэропорт Тбилиси имени Шота Руставели"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Dictionaries.BookingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_booking_status");

                    b.ToTable("booking_status", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "CREATED",
                            Name = "Создано"
                        },
                        new
                        {
                            Id = 2,
                            Code = "PENDING",
                            Name = "В обработке"
                        },
                        new
                        {
                            Id = 3,
                            Code = "BOOKED",
                            Name = "Забронировано"
                        },
                        new
                        {
                            Id = 4,
                            Code = "FAILED",
                            Name = "Ошибка"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Dictionaries.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<string>("IATACode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("iata_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_city");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_city_country_id");

                    b.ToTable("city", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CountryId = 3,
                            IATACode = "LCY",
                            Name = "Лондон"
                        },
                        new
                        {
                            Id = 2L,
                            CountryId = 1,
                            IATACode = "CDG",
                            Name = "Париж"
                        },
                        new
                        {
                            Id = 3L,
                            CountryId = 4,
                            IATACode = "TBS",
                            Name = "Тбилиси"
                        },
                        new
                        {
                            Id = 4L,
                            CountryId = 2,
                            IATACode = "LAX",
                            Name = "Лос Анджелес"
                        },
                        new
                        {
                            Id = 5L,
                            CountryId = 5,
                            IATACode = "DBX",
                            Name = "Дубай"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Dictionaries.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_country");

                    b.ToTable("country", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "FR",
                            Name = "Франция"
                        },
                        new
                        {
                            Id = 2,
                            Code = "USA",
                            Name = "США"
                        },
                        new
                        {
                            Id = 3,
                            Code = "UK",
                            Name = "Великобритания"
                        },
                        new
                        {
                            Id = 4,
                            Code = "GEO",
                            Name = "Грузия"
                        },
                        new
                        {
                            Id = 5,
                            Code = "UAE",
                            Name = "ОАЭ"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Dictionaries.TicketingProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_ticketing_provider");

                    b.ToTable("ticketing_provider", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "AIRTICKETS",
                            Name = "AirTickets.Fly"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Flight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("arrival_date");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("departure_date");

                    b.Property<long>("FromAirportId")
                        .HasColumnType("bigint")
                        .HasColumnName("from_airport_id");

                    b.Property<int>("TicketingProviderId")
                        .HasColumnType("integer")
                        .HasColumnName("ticketing_provider_id");

                    b.Property<long>("ToAirportId")
                        .HasColumnType("bigint")
                        .HasColumnName("to_airport_id");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("total_price");

                    b.HasKey("Id")
                        .HasName("pk_flight");

                    b.HasIndex("BookingId")
                        .IsUnique()
                        .HasDatabaseName("ix_flight_booking_id");

                    b.HasIndex("FromAirportId")
                        .HasDatabaseName("ix_flight_from_airport_id");

                    b.HasIndex("TicketingProviderId")
                        .HasDatabaseName("ix_flight_ticketing_provider_id");

                    b.HasIndex("ToAirportId")
                        .HasDatabaseName("ix_flight_to_airport_id");

                    b.ToTable("flight", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.FlightSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AirlineId")
                        .HasColumnType("integer")
                        .HasColumnName("airline_id");

                    b.Property<DateTime>("ArrivalDateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("arrival_date_utc");

                    b.Property<DateTime>("DepartureDateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("departure_date_utc");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uuid")
                        .HasColumnName("flight_id");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("flight_number");

                    b.Property<long>("FromAirportId")
                        .HasColumnType("bigint")
                        .HasColumnName("from_airport_id");

                    b.Property<long>("ToAirportId")
                        .HasColumnType("bigint")
                        .HasColumnName("to_airport_id");

                    b.HasKey("Id")
                        .HasName("pk_flight_segment");

                    b.HasIndex("AirlineId")
                        .HasDatabaseName("ix_flight_segment_airline_id");

                    b.HasIndex("FlightId")
                        .HasDatabaseName("ix_flight_segment_flight_id");

                    b.HasIndex("FromAirportId")
                        .HasDatabaseName("ix_flight_segment_from_airport_id");

                    b.HasIndex("ToAirportId")
                        .HasDatabaseName("ix_flight_segment_to_airport_id");

                    b.ToTable("flight_segment", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Passenger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("uuid")
                        .HasColumnName("booking_id");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("Middlename")
                        .HasColumnType("text")
                        .HasColumnName("middlename");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("passport_number");

                    b.HasKey("Id")
                        .HasName("pk_passenger");

                    b.HasIndex("BookingId")
                        .HasDatabaseName("ix_passenger_booking_id");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_passenger_country_id");

                    b.ToTable("passenger", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SearchRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("AggregationStarted")
                        .HasColumnType("boolean")
                        .HasColumnName("aggregation_started");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("CompletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at_utc");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<DateOnly>("DepartureDate")
                        .HasColumnType("date")
                        .HasColumnName("departure_date");

                    b.Property<long>("FromAirportId")
                        .HasColumnType("bigint")
                        .HasColumnName("from_airport_id");

                    b.Property<int>("PassengerCount")
                        .HasColumnType("integer")
                        .HasColumnName("passenger_count");

                    b.Property<string>("SearchResultKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("search_result_key");

                    b.Property<long>("ToAirportId")
                        .HasColumnType("bigint")
                        .HasColumnName("to_airport_id");

                    b.HasKey("Id")
                        .HasName("pk_search_request");

                    b.HasIndex("FromAirportId")
                        .HasDatabaseName("ix_search_request_from_airport_id");

                    b.HasIndex("ToAirportId")
                        .HasDatabaseName("ix_search_request_to_airport_id");

                    b.ToTable("search_request", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.HasOne("Domain.Entities.Dictionaries.BookingStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_booking_booking_status_status_id");

                    b.HasOne("Domain.Entities.Dictionaries.TicketingProvider", "TicketingProvider")
                        .WithMany()
                        .HasForeignKey("TicketingProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_booking_ticketing_provider_ticketing_provider_id");

                    b.Navigation("Status");

                    b.Navigation("TicketingProvider");
                });

            modelBuilder.Entity("Domain.Entities.Dictionaries.Airline", b =>
                {
                    b.HasOne("Domain.Entities.Dictionaries.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_airline_country_country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Entities.Dictionaries.Airport", b =>
                {
                    b.HasOne("Domain.Entities.Dictionaries.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_airport_city_city_id");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Domain.Entities.Dictionaries.City", b =>
                {
                    b.HasOne("Domain.Entities.Dictionaries.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_city_country_country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Entities.Flight", b =>
                {
                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithOne("Flight")
                        .HasForeignKey("Domain.Entities.Flight", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_flight_booking_booking_id");

                    b.HasOne("Domain.Entities.Dictionaries.Airport", "From")
                        .WithMany()
                        .HasForeignKey("FromAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_flight_airport_from_airport_id");

                    b.HasOne("Domain.Entities.Dictionaries.TicketingProvider", "TicketingProvider")
                        .WithMany()
                        .HasForeignKey("TicketingProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_flight_ticketing_provider_ticketing_provider_id");

                    b.HasOne("Domain.Entities.Dictionaries.Airport", "To")
                        .WithMany()
                        .HasForeignKey("ToAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_flight_airport_to_airport_id");

                    b.Navigation("Booking");

                    b.Navigation("From");

                    b.Navigation("TicketingProvider");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Domain.Entities.FlightSegment", b =>
                {
                    b.HasOne("Domain.Entities.Dictionaries.Airline", "Airline")
                        .WithMany()
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_flight_segment_airline_airline_id");

                    b.HasOne("Domain.Entities.Flight", "Flight")
                        .WithMany("Segments")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_flight_segment_flight_flight_id");

                    b.HasOne("Domain.Entities.Dictionaries.Airport", "From")
                        .WithMany()
                        .HasForeignKey("FromAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_flight_segment_airport_from_airport_id");

                    b.HasOne("Domain.Entities.Dictionaries.Airport", "To")
                        .WithMany()
                        .HasForeignKey("ToAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_flight_segment_airport_to_airport_id");

                    b.Navigation("Airline");

                    b.Navigation("Flight");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Domain.Entities.Passenger", b =>
                {
                    b.HasOne("Domain.Entities.Booking", null)
                        .WithMany("Passengers")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("fk_passenger_booking_booking_id");

                    b.HasOne("Domain.Entities.Dictionaries.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_passenger_country_country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Entities.SearchRequest", b =>
                {
                    b.HasOne("Domain.Entities.Dictionaries.Airport", "From")
                        .WithMany()
                        .HasForeignKey("FromAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_search_request_airport_from_airport_id");

                    b.HasOne("Domain.Entities.Dictionaries.Airport", "To")
                        .WithMany()
                        .HasForeignKey("ToAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_search_request_airport_to_airport_id");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Navigation("Flight")
                        .IsRequired();

                    b.Navigation("Passengers");
                });

            modelBuilder.Entity("Domain.Entities.Flight", b =>
                {
                    b.Navigation("Segments");
                });
#pragma warning restore 612, 618
        }
    }
}
